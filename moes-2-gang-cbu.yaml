#
# Moes 2‑Gang (BK72xx CBU) ESPHome configuration (Adoptable)
#
# Purpose
#   Two independent relays (Ceiling + LED Strip) on BK7231N (board: cbu).
#   Wi‑Fi/AP, OTA, API, web UI, and mDNS for adoption.
#   White LEDs used for Wi‑Fi fault indication (blink when Wi‑Fi is disconnected).
#   This version is tailored to my needs; you can repurpose the white LED indication
#   from “LED Strip” and “Ceiling” to any roles you prefer just swap the actions.
#
# Hardware pin map
#   Relay1 (Ceiling):    P24 (active HIGH)
#   Relay2 (LED Strip):  P26 (active HIGH)
#   White LED (Ceiling): P14 (active LOW, inverted)
#   White LED (Strip):   P20 (active LOW, inverted)
#   Button1 (Ceiling):   P23 (INPUT_PULLUP, active LOW)
#   Button2 (Strip):     P28 (INPUT, active HIGH)
#
# Secrets you MUST provide yourself
#   wifi_ssid and wifi_password are referenced with !secret below and must be defined
#   by you in your ESPHome/Home Assistant secrets.yaml. Example:
#     wifi_ssid: "MyHomeWiFi"
#     wifi_password: "super_secret_password"
#   If you do not use secrets, replace the !secret lines with literal strings.
#
# Reliability & tuning
#   logger.baud_rate is 0 to avoid serial logging overhead on BK chips.
#   api.reboot_timeout and wifi.reboot_timeout ensure self‑recovery after long outages.
#   preferences.flash_write_interval minimizes flash wear (10 minutes).
#   Wi‑Fi power saving is disabled (power_save_mode: NONE) for responsiveness.
#
# Adoption via ESPHome Dashboard
#   Add/update the dashboard_import URL below to your public GitHub file so the device
#   can be discovered and adopted from the ESPHome Dashboard.
#
substitutions:
  name: "moes-2gang-switch"
  friendly_name: "Moes 2-Gang switch"
  device_description: "Moes 2-Gang WiFi switch"
  project_name: "Moes.2_Gang_switch"
  project_version: "v1.0.4"
  log_level: "DEBUG"
  ipv6_enable: false
  icon_ceiling: "mdi:ceiling-light"
  icon_strip: "mdi:led-strip-variant"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: "${device_description}"
  name_add_mac_suffix: true
  min_version: 2025.9.3
  project:
    name: "${project_name}"
    version: "${project_version}"

bk72xx:
  board: cbu

preferences:
  flash_write_interval: 10min

logger:
  level: ${log_level}
  baud_rate: 0

api:
  reboot_timeout: 15min

ota:
  - platform: esphome

web_server:
  port: 80

network:
  enable_ipv6: ${ipv6_enable}

wifi:
  ap: {}

  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      bssid: !secret wifi_bssid
  fast_connect: true

  power_save_mode: NONE
  reboot_timeout: 15min

  on_disconnect:
    # Debounce brief hiccups before starting blink
    - delay: 10s
    - if:
        condition:
          not:
            wifi.connected:
        then:
          - switch.turn_on: wifi_blink
  on_connect:
    - switch.turn_off: wifi_blink

mdns:
  disabled: false

captive_portal:

# Allow adoption/import directly from GitHub
dashboard_import:
  package_import_url: "github://PavelMikeev/ESPHome/moes-2-gang-cbu.yaml@main"
  import_full_config: true

switch:
  # Relay 1: Ceiling
  - platform: gpio
    id: relay1
    name: "Ceiling"
    icon: "${icon_ceiling}"
    pin: P24
    restore_mode: ALWAYS_OFF

  # Relay 2: LED Strip
  - platform: gpio
    id: relay2
    name: "LED Strip"
    icon: "${icon_strip}"
    pin: P26
    restore_mode: ALWAYS_OFF

  # White LEDs for Wi‑Fi problem indication (active LOW)
  - platform: gpio
    id: white_led_ceiling
    pin: P14
    inverted: true
    internal: true

  - platform: gpio
    id: white_led_strip
    pin: P20
    inverted: true
    internal: true

  # Wi‑Fi blink (blink both white LEDs when Wi‑Fi is disconnected)
  - platform: template
    id: wifi_blink
    internal: true
    lambda: |-
      return false;
    turn_on_action:
      - while:
          condition:
            not:
              wifi.connected:
          then:
            - switch.turn_on: white_led_ceiling
            - switch.turn_on: white_led_strip
            - delay: 500ms
            - switch.turn_off: white_led_ceiling
            - switch.turn_off: white_led_strip
            - delay: 500ms
    turn_off_action:
      - switch.turn_off: white_led_ceiling
      - switch.turn_off: white_led_strip

binary_sensor:
  # Button 1 (Ceiling): INPUT_PULLUP, active LOW
  - platform: gpio
    id: button1
    pin:
      number: P23
      mode:
        input: true
        pullup: true
      inverted: true
    internal: true
    filters:
      - delayed_on: 12ms
      - delayed_off: 12ms
    on_press:
      - switch.toggle: relay1

  # Button 2 (Strip): INPUT, active HIGH
  - platform: gpio
    id: button2
    pin:
      number: P28
      mode:
        input: true
      inverted: false
    internal: true
    filters:
      - delayed_on: 12ms
      - delayed_off: 12ms
    on_press:
      - switch.toggle: relay2

button:
  - platform: restart
    id: restart_button
    name: "Restart"
    entity_category: config

  - platform: factory_reset
    name: "Factory Reset"
    entity_category: config

sensor:
  - platform: uptime
    id: uptime_seconds
    internal: true

  - platform: wifi_signal
    name: "WiFi Signal dB"
    update_interval: 60s
    entity_category: diagnostic

text_sensor:
  - platform: template
    name: "Firmware Version"
    icon: mdi:chip
    entity_category: diagnostic
    lambda: |-
      return std::string("${project_version}");

  - platform: version
    name: "ESPHome Version"
    entity_category: diagnostic

  - platform: template
    name: "Uptime"
    icon: mdi:clock-start
    entity_category: diagnostic
    disabled_by_default: true
    update_interval: 1min
    lambda: |-
      uint32_t s = (uint32_t) id(uptime_seconds).state;
      if (s == 0 || s > 315576000U) {
        return {"Starting up"};
      }
      uint32_t d = s / 86400U; s %= 86400U;
      uint8_t  h = s / 3600U; s %= 3600U;
      uint8_t  m = s / 60U;
      char buf[40];
      if (d)       snprintf(buf, sizeof(buf), "%ud %uh %um", (unsigned)d, h, m);
      else if (h)  snprintf(buf, sizeof(buf), "%uh %um", h, m);
      else         snprintf(buf, sizeof(buf), "%um", m);
      return std::string(buf);

  - platform: wifi_info
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    mac_address:
      name: "MAC Address"
      entity_category: diagnostic
