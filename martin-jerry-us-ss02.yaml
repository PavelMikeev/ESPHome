#
# Martin Jerry US‑SS02 ESPHome configuration (Adoptable)
#
# Purpose
#   Fan controller with HDC1080 (temperature/humidity) on ESP8266 (esp01_1m)
#   Native Fan entity (domain: fan). The relay is driven via a GPIO output.
#   Physical button toggles the fan and sets a flag manual_fan_triggered used in automations.
#   Wi‑Fi/AP, OTA, API, web UI; robust recovery and reduced flash wear.
#
# Hardware pin map (US‑SS02 reference)
#   Relay (Fan):      GPIO05 (active HIGH)
#   Blue LED (Fan):   GPIO14 (active LOW, inverted) follows fan state
#   Red LED (Status): GPIO12 (active LOW, inverted) blinks on Wi‑Fi loss
#   Button:           GPIO03/RX0 (INPUT_PULLUP, active LOW)
#   I²C (HDC1080):    SDA GPIO13, SCL GPIO04, addr 0x40
#
# Secrets you MUST provide yourself
#   wifi_ssid and wifi_password are referenced with !secret below and must be defined
#   by you in your ESPHome/Home Assistant secrets.yaml. Example:
#     wifi_ssid: "MyHomeWiFi"
#     wifi_password: "super_secret_password"
#   If you do not use secrets, replace the !secret lines with literal strings.
#
# Behavior & reliability
#   logger.baud_rate is 0 because RX0 is used as a button input.
#   api.reboot_timeout and wifi.reboot_timeout help self‑recover from long outages.
#   preferences.flash_write_interval (10 min) limits flash wear.
#   HDC1080 readings are smoothed; both metrics report with 1 decimal place.
#   manual_fan_triggered is set to true only by the physical button; a template sensor
#   exposes it as 1/0 for automations.
#
# Adoption via ESPHome Dashboard
#   Add/update the dashboard_import URL pointing at your public GitHub file so the device
#   can be discovered and adopted from the ESPHome Dashboard.
#
substitutions:
  name: "mj-us-ss02"
  friendly_name: "Martin Jerry US-SS02"
  device_description: "US-SS02 fan switch with HDC1080 (ESP8266)"
  project_name: "Martin_Jerry.US_SS02"
  project_version: "v1.1.2"
  dns_domain: ".local"
  wifi_fast_connect: false
  log_level: "INFO"
  ipv6_enable: false
  icon_fan: "mdi:fan"
  icon_led: "mdi:led"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: "${device_description}"
  name_add_mac_suffix: true
  min_version: 2025.9.3
  project:
    name: "${project_name}"
    version: "${project_version}"

esp8266:
  board: esp01_1m
  restore_from_flash: false

preferences:
  flash_write_interval: 10min

logger:
  level: ${log_level}
  baud_rate: 0    # RX0 used as button; disable UART logs

api:
  reboot_timeout: 15min

ota:
  - platform: esphome

web_server:
  port: 80

network:
  enable_ipv6: ${ipv6_enable}

wifi:
  ap: {}

  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: ${wifi_fast_connect}
  domain: "${dns_domain}"

  power_save_mode: LIGHT
  output_power: 17dB
  reboot_timeout: 15min

  on_disconnect:
    - switch.turn_on: red_led_blink
  on_connect:
    - switch.turn_off: red_led_blink

mdns:
  disabled: false

captive_portal:

# Allow adoption/import directly from GitHub
dashboard_import:
  package_import_url: "github://PavelMikeev/ESPHome/martin-jerry-us-ss02.yaml@main"
  import_full_config: true

i2c:
  sda: GPIO13
  scl: GPIO04
  scan: true

globals:
  - id: manual_fan_triggered
    type: bool
    restore_value: no
    initial_value: 'false'

output:
  - platform: gpio
    id: relay
    pin: GPIO05

switch:
  - platform: gpio
    id: blue_led
    pin: GPIO14
    inverted: true
    internal: true

  - platform: gpio
    id: red_led
    pin: GPIO12
    inverted: true
    internal: true

  - platform: template
    id: red_led_blink
    internal: true
    lambda: |-
      return false;
    turn_on_action:
      - while:
          condition:
            not:
              wifi.connected:
          then:
            - switch.turn_on: red_led
            - delay: 500ms
            - switch.turn_off: red_led
            - delay: 500ms
    turn_off_action:
      - switch.turn_off: red_led

binary_sensor:
  - platform: gpio
    id: main_button
    pin:
      number: GPIO03
      mode: INPUT_PULLUP
      inverted: true
    internal: true
    filters:
      - delayed_on: 12ms
      - delayed_off: 12ms
    on_press:
      - globals.set:
          id: manual_fan_triggered
          value: 'true'
      - fan.toggle: bathroom_vent_fan

fan:
  - platform: binary
    id: bathroom_vent_fan
    name: "Vent Fan"
    icon: "mdi:fan"
    output: relay
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - switch.turn_on: blue_led
    on_turn_off:
      - switch.turn_off: blue_led

sensor:
  # HDC1080 temperature and humidity at 14-bit, with filtering/calibration hooks
  - platform: hdc1080
    address: 0x40
    update_interval: 30s
    temperature:
      name: "Temperature"
      id: temp
      icon: mdi:thermometer
      accuracy_decimals: 1
      filters:
        # Reduce noise and self-heating bias; tune offset after comparison
        - sliding_window_moving_average:
            window_size: 5
            send_every: 1
        # Example offset; adjust to your calibration (+/-)
        # - offset: -0.3
    humidity:
      name: "Humidity"
      id: hum
      icon: mdi:water-percent
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 5
            send_every: 1
        - lambda: |-
            if (x < 0.0f) return 0.0f;
            if (x > 100.0f) return 100.0f;
            return x;

  - platform: template
    name: "Manual Fan Triggered"
    id: manual_trigger_sensor
    lambda: |-
      return id(manual_fan_triggered) ? 1.0 : 0.0;
    update_interval: 5s
    unit_of_measurement: "bool"
    accuracy_decimals: 0

  - platform: uptime
    id: uptime_seconds

  - platform: wifi_signal
    name: "WiFi Signal dB"
    update_interval: 60s
    entity_category: diagnostic

text_sensor:
  - platform: template
    name: "Firmware Version"
    icon: mdi:chip
    entity_category: diagnostic
    lambda: |-
      return std::string("${project_version}");

  - platform: version
    name: "ESPHome Version"
    entity_category: diagnostic

  - platform: template
    name: "Uptime"
    icon: mdi:clock-start
    entity_category: diagnostic
    lambda: |-
      uint32_t s = (uint32_t) id(uptime_seconds).state;
      if (s == 0 || s > 315576000U) {
        return {"Starting up"};
      }
      uint32_t d = s / 86400U; s %= 86400U;
      uint8_t  h = s / 3600U; s %= 3600U;
      uint8_t  m = s / 60U;   s %= 60U;
      char buf[40];
      if (d)       snprintf(buf, sizeof(buf), "%ud %uh %um %us", (unsigned)d, h, m, (unsigned)s);
      else if (h)  snprintf(buf, sizeof(buf), "%uh %um %us", h, m, (unsigned)s);
      else if (m)  snprintf(buf, sizeof(buf), "%um %us", m, (unsigned)s);
      else         snprintf(buf, sizeof(buf), "%us", (unsigned)s);
      return std::string(buf);

  - platform: wifi_info
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    mac_address:
      name: "MAC Address"
      entity_category: diagnostic

button:
  - platform: restart
    id: restart_button
    name: "Restart"
    entity_category: config

  - platform: factory_reset
    name: "Factory Reset"
    entity_category: config
